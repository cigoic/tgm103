@model WuliKaWu.Data.Article

@{
    ViewData["Title"] = "Create";
}


<div class="container" id="blogCreateApp" />

<h1>Create</h1>

<h4>Article</h4>
<hr />


<div class="row">
    <div class="col-sm-12 col-md-12 col-12">
        <div class="form-group">
            <label for="Title" class="control-label">標題</label>
            <input for="Title" class="form-control" type="text" v-model="title" />
        </div>
        <div class="form-group">
            <label id="Content" name="Content" class="control-label">內容</label>
            <textarea ref="editor" for="Content" id="Content" name="Content" v-model="content"></textarea>
        </div>
        <template>
            <div class="form-group">
                <label for="CategoryId" class="control-label">文章分類</label>
                <select v-model="selectedOption" class="form-control">
                    <option value="">Make a Choice...</option>
                    <option v-for="option in options" :key="option.value" :value="option.value">
                        {{ option.text }}
                    </option>
                </select>
            </div>
        </template>
        <div class="form-group mt-15 mb-15">
            <button type="button" @@click.prevent="handleSubmit()" class="btn btn-primary">送出</button>
        </div>
    </div>
</div>


@section Scripts {
    @{
        // 可能無法驗證 CK Editor
        //await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.0/classic/ckeditor.js"></script>

    <script>
        let blogCreateVue = new Vue({
            //el:'#blogCreateApp',
            name: "blogCreateApp",
            data: {
                selectedOption: '',
                options: [
                    { text: 'Uncategorized', value: 1 },
                    { text: 'Blog GridView', value: 2 },
                    { text: 'Latest Blog', value: 3 },
                    { text: 'Our Blog', value: 4 },
                ],
                title: "",
                content: {},
                category: "",
                editor: "",
            },
            mounted: function () {
                ClassicEditor.create(this.$refs.editor, {
                    height: 500,
                    language: 'zh',
                    //ckfinder: { uploadUrl: '/Blog/UploadImage' },
                    //mediaEmbed: {
                    //    previewWidth: 575,
                    //    previewHeight: 400,
                    //}
                }).then(editor => { console.log("CK:", editor) })
                    .catch(error => { tgm103ShowError(error) })
                console.log("Hi~from Article Create")
            },
            watch: {
                content(newValue) {
                    ClassicEditor.instances[this.$refs.editor.name].setData(newValue);
                },
            },
            methods: {
                //Create
                handleSubmit: function () {
                    let self = this;
                    let form = new FormData();
                    form.append("Title", self.title);
                    form.append("CategoryId", self.selectedOption)
                    form.append("Content", self.content);

                    axios.post('/api/Blog/Create', form, {
                        method: "POST",
                        //'Content-Type': 'multipart/form-data'
                        //'Content-Type': 'application/x-www-form-urlencoded'
                    })
                        .then(response => { tgm103ShowSuccess(response.data.message) })
                        .catch(error => { tgm103ShowError(error.response.data.message) })
                }
            },
        })

        document.addEventListener("DOMContentLoaded", () => {
            blogCreateVue.$mount('#blogCreateApp')
        })
    </script>

}
