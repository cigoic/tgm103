@model WuliKaWu.Data.Article

<div class="container" id="app" />

<h1>Create</h1>

<h4>Article</h4>
<hr />


<div class="row">
    <div class="col-sm-12 col-md-12 col-12">
        <div class="form-group">
            <label for="Title" class="control-label">標題</label>
            <input for="Title" class="form-control" type="text" v-model="title" />
        </div>
        <div class="form-group">
            @*<label id="ck" name="Content" class="control-label">內容</label>*@
            @*<textarea ref="editor" id="ckeditor" name="Content" v-model="editorContent"></textarea>*@
            <textarea id="ck" v-model="content"></textarea>
            @*<ckeditor :editor="editor" v-model="content"></ckeditor>*@
            @*<ckeditor :editor="editor"></ckeditor>*@
            @*<ckeditor :ref="editor"></ckeditor>*@

        </div>
        <template>
            <div class="form-group">
                <label for="CategoryId" class="control-label">文章分類</label>
                <select v-model="selectedOption" class="form-control">
                    <option value="">Make a Choice...</option>
                    <option v-for="option in options" :key="option.value" :value="option.value">
                        {{ option.text }}
                    </option>
                </select>
            </div>
        </template>
        <div class="form-group mt-15 mb-15">
            <button type="button" @@click.prevent="handleSubmit()" class="btn btn-primary">送出</button>
        </div>
    </div>
</div>


@section Scripts {
    @{
        // 可能無法驗證 CK Editor
        //await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.0/classic/ckeditor.js"></script>

    <script>
        let app = new Vue({
            //el:'#app',
            name: "app",
            data: {
                selectedOption: '',
                options: [
                    { text: 'Uncategorized', value: 1 },
                    { text: 'Blog GridView', value: 2 },
                    { text: 'Latest Blog', value: 3 },
                    { text: 'Our Blog', value: 4 },
                ],
                title: "",
                content: "",
                category: "",
                editor: null, //ClassicEditor,
            },
            //components: {
            //    ckeditor: CKEditor.component
            //},
            mounted: function () {
                let self = this
                //this.editor = CKEDITOR.replace(this.$refs.editor);
                //this.editor.on("change", () => {
                //    this.content = this.editor.getData();
                //});
                //ClassicEditor.create(this.$refs.editor, {
                ClassicEditor.create(document.querySelector("#ck"), {
                    height: '500px',
                    language: 'zh',
                    ckfinder: {
                        uploadUrl: '/api/Blog/UploadImage',
                        options: {
                            resourceType: 'Images'
                        }
                    },
                    mediaEmbed: {
                        previewWidth: 320,
                        previewHeight: 240,
                    }
                }).then(editor => {
                    //CKFinder.setupCKEditor(editor, '/images/ckfinder/');
                    self.editor = editor;
                    //self.editor.setData(this.content) //顯示文章內容
                })
                    .catch(error => { tgm103ShowError(error) })
            },
            beforeDestroy() {
                self.editor.destroy();
            },
            methods: {
                //Create
                handleSubmit: async function () {
                    let self = this;
                    self.content = self.editor.getData();
                    let form = new FormData();
                    form.append("Title", self.title);
                    form.append("CategoryId", self.selectedOption)
                    form.append("Content", self.content);

                    const images = Array.from(self.content.matchAll(/<img [^>]*src="([^"]+)"/g))
                        .map(match => match[1]);
                    console.log("...images", ...images)
                    if (images != null)
                        images.forEach((image, i) => form.append(`Images[${i}]`, image));


                    try {
                        await axios.post('/api/Blog/Create', form, {
                            headers: { 'Content-Type': 'multipart/form-data' }
                            //"Accept": "application/json",
                            //"Content-Type": "application/json",
                            //'Content-Type': 'multipart/form-data'
                            //'Content-Type': 'application/x-www-form-urlencoded'
                        })
                            .then(response => {
                                //console.log("upload img response:", response)
                                tgm103ShowSuccess(response.data.value.message)
                            })
                            .catch(error => { tgm103ShowError(error.response.data.message) })
                    } catch (error) {
                        tgm103ShowError(error);
                    }
                    self.title = ""
                    self.content = ""
                    self.selectedOption = ""
                    self.editor.setData("")
                },
            },
        })

        document.addEventListener("DOMContentLoaded", () => {
            app.$mount('#app')

        })
    </script>

}
