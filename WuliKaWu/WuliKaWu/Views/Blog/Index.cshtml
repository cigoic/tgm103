<div class="container" id="blogApp" />


<div class="blog-area pt-15 pb-100">
    <template>
        <div class="container">
            <div class="row">
                <div v-for="(article, index) in formattedArticles" :key="index" class="col-lg-4 col-md-6">
                    <div class="blog-wrap mb-50" data-aos="fade-up" :data-aos-delay="200+ 200*index">
                        <div class="blog-img-date-wrap mb-25">
                            <div class="blog-img">
                                <a href="/Blog/Details"><img :src="article.titleImage" alt=""></a>
                            </div>
                            <div class="blog-date">
                                <h5> {{ article.timeInDay }} <span>{{ article.timeInMonth }}</span></h5>
                            </div>
                        </div>

                        <div class="blog-content">
                            <h1>{{ article.title }}</h1>
                            <p v-html="article.description">{{ article.description }}</p>

                            <div class="blog-btn-2 btn-hover">
                                <a class="btn hover-border-radius theme-color" :href="articleLink(article.id)">Read More</a>
                                <a v-if="IsAuthorized" class="btn btn-primary hover-border-radius theme-color" style="background-color:cadetblue" :href="linkToEdit(article.id)">Edit</a>
                                @*<a class="btn btn-danger hover-border-radius theme-color" :href="linkToCreate(article.id)">Create</a>*@
                                <a v-if="IsAuthorized" class="btn btn-danger hover-border-radius theme-color" style="background-color:indianred" @@click="showConfirm(article.id)">Del</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*分頁*@
            <div class="pagination-style-1" data-aos="fade-up" data-aos-delay="200" :hidden="articles.length===0">
                @*<div id="loading" class="spinner-border center" role="status">
                <span class="visually-hidden">Loading...</span>
                </div>*@
                @*
                <ul>
                <li><a :class="{active:currentPage==n}" v-for="n in 10" href="#">{{n}}</a></li>
                <li><a class="next" href="#"><i class=" ti-angle-double-right "></i></a></li>
                </ul>
                *@
                <paginate :page-count="Math.ceil(articles.length/countPerPage)"
                          :page-range="10"
                          :margin-pages="1"
                          :click-handler="clickCallback"
                          :prev-text="'Prev'"
                          :next-text="'Next'"
                          :container-class="'pagination'"
                          :page-class="'page-item'">
                    <span v-if="articles.length > 1" slot="prevContent"><i class=" ti-angle-double-left "></i></span>
                    <span v-if="articles.length > 1" slot="nextContent"><i class=" ti-angle-double-right "></i></span>
                </paginate>
            </div>

        </div>
    </template>
</div>

@section Scripts{

    <script src="https://unpkg.com/vuejs-paginate@1.9.0"></script>
    <script>
        Vue.component('paginate', VuejsPaginate);

        let blogVue = new Vue({
            //el:'#blogApp',
            name: "blogApp",
            data: {
                articles: [],
                //visibleArticles: [],
                articleBaseLink: "/Blog/Details/",
                currentPage: 1,
                countPerPage: 3,
                IsAuthorized: false,
                //currentIndex: 0,
            },
            created() {
                axios.get("/api/Blog/GetLoginStatus")
                    .then(response => { this.IsAuthorized = response.data; })
                    .catch(error => { tgm103ShowError(error); });

                this.getArticles()
            },
            mounted: function () {
                var self = this;

                //const options = {
                //    threshold: 0.25
                //};
                //var load = document.getElementById("loading")
                //var ob = new IntersectionObserver(function () {
                //    self.currentIndex++;
                //    self.visibleArticles.push(self.articles[self.currentIndex])
                //    //self.getData()
                //}, options)
                //ob.observe(load);
            },
            computed: {
                filterArticles: function () {
                    var min = this.countPerPage * (this.currentPage - 1 <= 0 ? 0 : this.currentPage - 1);
                    var max = this.countPerPage * this.currentPage;
                    this.min = min;
                    this.max = max;
                    return this.articles.slice(min, max)
                },
                formattedArticles() {
                    return this.filterArticles.map(article => {
                        const date = new Date(article.modifiedDate);
                        return {
                            ...article,
                            timeInDay: `${date.getDate()}`,
                            timeInMonth: `${date.toLocaleString('default', { month: 'short' })}` //`${this.getMonthName(date.getMonth())}`
                        };
                    });
                }
            },
            methods: {
                clickCallback: function (page) {
                    this.currentPage = page;
                },
                articleLink: function (articleId) {
                    return this.articleBaseLink + articleId
                },
                linkToEdit: function (id) {
                    const queryEditBaseLink = "/Blog/Edit/" + id
                    return queryEditBaseLink
                },
                linkToCreate: function (id) {
                    const queryCreateBaseLink = "/Blog/Create"
                    return queryCreateBaseLink
                },
                getArticles: async function () {
                    await axios.get("/api/Blog/GetArticles")
                        .then(response => {
                            console.log("at created, article response:", response)
                            if (response.status == 200 && response.data.statusCode === 200) {
                                this.articles = response.data.value
                                //this.visibleArticles = this.articles.slice(0, this.countPerPage);
                                console.log("articles:", this.articles)
                            }
                        })
                        .catch(error => { tgm103ShowError(error.response.data) })
                },
                delArticle: function (id) {
                    console.log("del article id:", id)
                    const queryDelBaseUrl = '/api/Blog/Delete/' + id
                    axios.get(queryDelBaseUrl)
                        .then(response => {
                            console.log("del article response:", response)
                            //if (response.status === 200 && response.data.statusCode == 200)
                            tgm103ShowSuccess(response.data.value.message)
                            window.location = "/Blog"
                        })
                        .catch(error => {
                            console.log("del article error:", error)
                            tgm103ShowError(error.response.data.value.message)
                        })
                },
                showConfirm(id) {
                    Swal.fire({
                        title: "確定刪除嗎??",
                        text: "此動作不可逆!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "是的, 刪除!",
                        cancelButtonText: "不，再考慮"
                    }).then((result) => {
                        if (result.value) {
                            // Perform the action if the user confirms
                            this.delArticle(id)
                        }
                    });
                },
            },
        })

        document.addEventListener("DOMContentLoaded", () => {
            blogVue.$mount('#blogApp')
        })
    </script>
}
