<div class="container" id="blogEditApp" />

<h1>Edit</h1>

<h4>Article</h4>
<hr />
<div class="row">
    <div class="col-sm-12 col-md-12 col-12">
        <input type="hidden" for="Id" v-model="article.id" />
        <input type="hidden" for="MemberId" v-model="article.memberId" />
        <div class="form-group">
            <label for="MemberName" class="control-label">作者</label>
            <input for="MemberName" class="form-control" type="text" v-model="article.memberName" readonly />
        </div>
        <div class="form-group">
            <label for="Title" class="control-label">標題</label>
            <input for="Title" class="form-control" type="text" v-model="article.title" />
        </div>
        <div class="form-group">
            <label for="CreatedDate" class="control-label"></label>
            <input id="CreatedDate" class="form-control" v-model="article.createdDate" readonly />
        </div>
        <div class="form-group">
            <label for="ModifiedDate" class="control-label"></label>
            <input id="ModifiedDate" class="form-control" v-model="article.modifiedDate" readonly />
        </div>
        <div class="form-group">
            <textarea id="ck" v-model="content"></textarea>
        </div>
        <template>
            <div class="form-group">
                <label for="CategoryId" class="control-label">文章分類</label>
                <select v-model="selectedOption" class="form-control">
                    <option :value="article.categoryId">Make a Choice...Current: ({{ showSelectOpts(article.categoryId) }})</option>
                    <option v-for="option in options" :key="option.value" :value="option.value">
                        {{ option.text }}
                    </option>
                </select>
            </div>
        </template>
        <div class="form-group">
            <button type="button" v-if="isEditable" @@click.prevent="handleSubmit" class="btn btn-primary">修改</button>
            <button v-if="!isEditable">返回</button>
        </div>
    </div>
</div>


@section Scripts {
    @{
        //await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.0/classic/ckeditor.js"></script>

    <script>
        let blogEditVue = new Vue({
            //el: 'blogEditApp',
            data: {
                selectedOption: '',
                options: [
                    { text: 'Uncategorized', value: 1 },
                    { text: 'Blog GridView', value: 2 },
                    { text: 'Latest Blog', value: 3 },
                    { text: 'Our Blog', value: 4 },
                ],
                postBaseUrl: "/api/Blog/Edit/",
                article: [],
                articleId: 0,
                content: "",
                editor: null,
                isEditable: true,
            },
            computed: {

            },
            mounted: function () {

                ClassicEditor.create(document.querySelector("#ck"), {
                    height: '500px',
                    language: 'zh',
                    ckfinder: {
                        uploadUrl: '/api/Blog/UploadImage',
                        options: {
                            resourceType: 'Images'
                        }
                    },
                    mediaEmbed: {
                        previewWidth: 320,
                        previewHeight: 240,
                    }
                }).then(editor => {
                    this.editor = editor;
                })
                    .catch(error => { tgm103ShowError(error) })

                this.articleId = @ViewBag.ArticleId;
                this.getContent(this.articleId)
            },
            beforeDestroy() {
                self.editor.destroy();
            },
            methods: {
                showSelectOpts: function (type) {
                    if (type == 1) return "Uncategorized"
                    if (type == 2) return "Blog GridView"
                    if (type == 3) return "Latest Blog"
                    if (type == 4) return "Our Blog"
                },
                handleSubmit: async function () {
                    let self = this;
                    self.content = self.editor.getData();
                    self.title = self.title
                    self.selectedOption = self.selectedOption
                    console.log("...title:", self.title)
                    console.log("...catg:", self.selectedOption)

                    let form = new FormData();
                    form.append("Title", self.title);
                    form.append("CategoryId", self.selectedOption)
                    form.append("Content", self.content);

                    try {
                        await axios.post('/api/Blog/Edit', form, {
                            headers: { 'Content-Type': 'multipart/form-data' }
                        })
                            .then(response => {
                                console.table("成功編輯：", response);
                                //tgm103ShowSuccess(response.data.uploaded)
                                self.isEditable = false
                            })
                            .catch(error => { tgm103ShowError(error.response.message) })
                    } catch (error) {
                        tgm103ShowError(error);
                    }
                },
                getContent: async function (id) {
                    let self = this
                    const queryArticleUrl = "/api/Blog/GetEditArticleById/" + id
                    await axios.get(queryArticleUrl)
                        .then(response => {
                            console.log("成功取文:", response.data)
                            if (response.status == 200 && response.data.statusCode === 200) {
                                self.article = response.data.value
                                self.editor.setData(self.article.content) //顯示文章內容
                                console.log("article:", self.article)
                            }
                        })
                        .catch(error => { tgm103ShowError(error.response.data) })
                },
            }
        })

        document.addEventListener("DOMContentLoaded", () => {
            blogEditVue.$mount('#blogEditApp')
        })
    </script>
}
