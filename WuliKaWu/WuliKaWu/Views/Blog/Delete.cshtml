@model WuliKaWu.Data.Article

@{
    ViewData["Title"] = "Delete";
}

<div class="container" id="blogDeleteApp" />

<div class="row">
    <div class="col-sm-12 col-md-12 col-12">
        <div class="form-group">
            <label for="Title" class="control-label">標題</label>
            <input for="Title" class="form-control" type="text" v-model="title" readonly />
        </div>
        <div class="form-group">
            @*<label id="ck" name="Content" class="control-label">內容</label>*@
            @*<textarea ref="editor" id="ckeditor" name="Content" v-model="editorContent"></textarea>*@
            <textarea id="ck" v-model="content"></textarea>
            @*<ckeditor :editor="editor" v-model="content"></ckeditor>*@
            @*<ckeditor :editor="editor"></ckeditor>*@
            @*<ckeditor :ref="editor"></ckeditor>*@

        </div>
        <template>
            <div class="form-group">
                <label for="CategoryId" class="control-label">文章分類</label>
                <select v-model="selectedOption" class="form-control">
                    <option value="">Current: ({{ showSelectOpts(article.categoryId) }}</option>
                    <option v-for="option in options" :key="option.value" :value="option.value">
                        {{ option.text }}
                    </option>
                </select>
            </div>
        </template>
        <div class="form-group mt-15 mb-15">
            <button type="button" @@click.prevent="handleSubmit(articleId)" class="btn btn-danger">確認刪除</button>
        </div>
    </div>
</div>


@section Scripts{

    <script>

        let blogDeleteVue = new Vue({
            //el:'#blogDeleteApp',
            name: "blogDeleteApp",
            data: {
                selectedOption: '',
                options: [
                    { text: 'Uncategorized', value: 1 },
                    { text: 'Blog GridView', value: 2 },
                    { text: 'Latest Blog', value: 3 },
                    { text: 'Our Blog', value: 4 },
                ],
                article: {},//@Model,
                articleId: 0,
                isAuthorized: false,
            },
            mounted: function () {
                this.isAuthorized = localStorage.getItem("token") !== null;
                console.log("...is authorized?", this.isAuthorized)

                ClassicEditor.create(document.querySelector("#ck"), {
                    height: '500px',
                    language: 'zh',
                }).then(editor => {
                    this.editor = editor;
                })
                    .catch(error => { tgm103ShowError(error) })

                this.articleId = @ViewBag.ArticleId;
                this.getContent(this.articleId)
            },
            methods: {
                // Delete
                handleSubmit: function (id) {
                    console.log("submit....id:", id)
                    //axios.post('/api/Blog/Delete', id, {
                    //    method: "POST",
                    //})
                    //    .then(response => { tgm103ShowSuccess(response.data.message) })
                    //    .catch(error => { tgm103ShowError(error.response.data.message) })
                },
                getContent: async function (id) {
                    let self = this
                    const queryArticleUrl = "/api/Blog/GetEditArticleById/" + id
                    await axios.get(queryArticleUrl)
                        .then(response => {
                            console.log("成功取文:", response.data)
                            if (response.status == 200 && response.data.statusCode === 200) {
                                self.article = response.data.value
                                self.editor.setData(self.article.content) //顯示文章內容
                                //self.title = self.article.title
                                //self.categoryId = self.article.categoryId
                                //self.articleId = self.article.id
                                //self.memberId = self.article.memberId
                                //self.memberName = self.article.memberName
                                //self.createdDate = self.article.createdDate
                                //self.modifiedDate = self.article.modifiedDate
                                console.log("article:", self.article)
                            }
                        })
                        .catch(error => { tgm103ShowError(error.response.data) })
                },
            }
        })

        document.addEventListener("DOMContentLoaded", () => {
            blogDeleteVue.$mount('#blogDeleteApp')
        })
    </script>
}
