@{
    ViewData["Title"] = "Edit";
}

    <style>
        .btn-danger i {
            color: black;
        }

        .btn-danger:hover i {
            color: red;
        }
    </style>


<div id="EditProduct">
    <div class="container m-5">
        <div class="section-title-4 text-center mb-55" data-aos="fade-up" data-aos-delay="200">
            <h2>Edit Product</h2>
        </div>
        <div class="shop-bottom-area">
            <div class="tab-content jump">
                <div class="shop-list-wrap mb-30" data-aos="fade-up" data-aos-delay="200">
                    <div class="row billing-info-wrap">
                        <div class="col-lg-12 col-sm-12 contact-form-style">
                            <div class="shop-list-content">
                                @*商品內容*@
                                <div class="row billing-select select-style">
                                    <div class="col-6 ">
                                        <div class="form-group" hidden>
                                            <label for="ProductId" class="control-label">ProductId</label>
                                            <input id="ProductId" name="ProductId" class="form-control" v-model="productFields.productId" />
                                        </div>
                                        <div class="form-group">
                                            <label for="ProductName" class="control-label">ProductName</label>
                                            <input id="ProductName" name="ProductName" class="form-control" v-model="productFields.productName" />
                                        </div>
                                        <div class="form-group">
                                            <label for="Price" class="control-label">Price</label>
                                            <input id="Price" name="Price" class="form-control" v-model="productFields.price" />
                                        </div>
                                        <div class="form-group">
                                            <label for="SellingPrice" class="control-label">SellingPrice</label>
                                            <input id="SellingPrice" name="SellingPrice" class="form-control" v-model="productFields.sellingPrice" />
                                        </div>

                                        <div class="form-group">
                                            <label for="Comment" class="control-label">Comment</label>
                                            <input id="Comment" name="Comment" class="form-control" v-model="productFields.comment" />
                                        </div>
                                    </div>
                                    <div class="col-6 ">
                                        <div class="form-group">
                                            <label for="Color" class="control-label">Color</label>
                                            <select id="Color" class="form-control" v-model="productFields.colors" value="productFields.colors" multiple>
                                                <option v-for="item in optionSource.color" :value="item.id">{{item.type}}</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="Size" class="control-label">Size</label>
                                            <select id="Size" class="form-control" v-model="productFields.size" value="productFields.size">
                                                <option v-for="item in optionSource.size" :value="item.id">{{item.type}}</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="Category" class="control-label">Category</label>
                                            <select id="Category" class="form-control" v-model="productFields.categoryName" value="productFields.categoryName">
                                                <option v-for="item in optionSource.category" :value="item.id">{{item.type}}</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="Tag" class="control-label">Tag</label>
                                            <select id="Tag" class="form-control" v-model="productFields.tags" value="productFields.tags" multiple>
                                                <option v-for="item in optionSource.tag" :value="item.id">{{item.type}}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*商品圖片*@
                        <div class="col-lg-12 col-sm-12 contact-form-style">
                            <div class="product-list-img ">
                                <div class="row">
                                    <div class="col-3" v-for="item in productFields.picturesPath" style="position:relative">
                                        <button class="btn-danger" style="border:none; background-color:transparent; font-size:20px; position: absolute; top: 0; left: 15px; "
                                                :name="item" v-on:click="deletePic(event)">
                                            <i class=" ti-trash " style="pointer-events: none;"></i>
                                        </button>
                                        <img :src="item" class="w-100 img-thumbnail" style="padding: 12px;" alt="product picture" />

                                    </div>
                                </div>
                            </div>
                        </div>
                        @*商品圖片上傳預覽*@
                        <div class="col-lg-12 col-sm-12 contact-form-style">
                            <div class="form-group mb-4">
                                <label for="PicturePath" class="control-label">Picture</label>
                                <input for="PicturePath" class="form-control" name="PicturePath" type="file" id="fileupload" @@change="uploadPic" multiple />
                            </div>
                            <div class="product-list-img">
                                <div class="row">
                                    <div class="col-3" v-for="item in picPriview">
                                        <img :src="item" class="w-100 img-thumbnail" />
                                    </div>
                                </div>
                            </div>
                            <div class="mt-5">
                                <a href="/Products/Index">Back to List</a>
                            </div>
                        </div>
                        @*儲存編輯按鍵*@
                        <div class="col-lg-12 col-md-3 ms-60 p-80 contact-form-style">
                            <div class="col-lg-12 col-md-12 col-12 p-4 pe-0 contact-us-btn btn-hover">
                                <div>
                                    <button type="button" class="submit" v-on:click="saveProductChange(@ViewBag.id)">Save Edit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        let app = new Vue({
            el: "#EditProduct",
            data:
            {
                optionSource: {
                    category: [],
                    color: [],
                    size: [],
                    tag: []
                },

                productFields: {
                    productId: "",
                    productName: "",
                    colors: [],
                    size: { id: 0 },
                    categoryName: { id: 0 },
                    price: "",
                    sellingPrice: "",
                    tags: [{ id: 0 }],
                    pictures: [],
                    picturesPath: [],
                    comment: "",
                },

                picFiles: [],
                picPriview: [],
                test: [],
                tempPic: [],
                deletePics:[]
            },

            mounted() { this.getData(); },
            methods:
            {
                getData: function () {
                    var self = this;
                    this.GetCategoryData();
                    this.GetColorData();
                    this.GetSizeData();
                    this.GetTagData();
                    
                    fetch("/api/product/getbyid/" + "@ViewBag.id")                    
                        .then(function (response) { return response.json() })
                        .then(function (result) {
                            console.log(result);
                            self.productFields = result;
                            self.productFields.productId = @ViewBag.id;
                            self.productFields.tags = self.productFields.tags.map(x => x.id)
                            self.productFields.colors = self.productFields.colors.map(x => x.id)
                            self.productFields.categoryName = self.productFields.categoryName.id
                            self.productFields.size = self.productFields.size.id
                            self.productFields.picturesPath = self.productFields.pictures
                            self.picPriview=[]
                        })
                },
                uploadPic: function (e) {
                    var self = this;
                    self.productFields.pictures = e.target.files;
                    for (let fileData of self.productFields.pictures) {

                        let reader = new FileReader();
                        reader.addEventListener("load", (event) => {
                            self.picPriview.push(event.target.result);
                        });
                        reader.readAsDataURL(fileData)
                    }
                },
                deletePic: function(event){
                    event.target.parentElement.remove();
                    this.deletePics.push(event.target.getAttribute("name"));
                },
                GetCategoryData: function () {
                    var self = this;
                    fetch("/api/category/getall")
                        .then(function (response) { return response.json() })
                        .then(function (result) { self.optionSource.category = result })
                },
                GetColorData: function () {
                    var self = this;
                    fetch("/api/color/getall")
                        .then(function (response) { return response.json() })
                        .then(function (result) { self.optionSource.color = result })
                },
                GetSizeData: function () {
                    var self = this;
                    fetch("/api/size/getall")
                        .then(function (response) { return response.json() })
                        .then(function (result) { self.optionSource.size = result })
                },
                GetTagData: function () {
                    var self = this;
                    fetch("/api/tag/getall")
                        .then(function (response) { return response.json() })
                        .then(function (result) { self.optionSource.tag = result })
                },
                saveProductChange: function (id) {
                    var self = this;
                    var Id = self.productFields.productId
                    if(self.productFields.sellingPrice==null)
                    {
                        self.productFields.sellingPrice = "";
                    }

                    var qureyEditBaseUrl = '/api/product/editbyid/' + Id;
                    let form = new FormData();
                    Object.keys(self.productFields).forEach(key => {
                        if (key == "colors" || key == "tags") {
                            console.log("ct", self.productFields[key])
                            self.productFields[key].forEach(x => {
                                form.append(key, x)
                            })
                        }
                        else if (key == "pictures") {
                            console.log("p", self.productFields[key])
                            Array.from(self.productFields[key]).forEach(x => {
                                form.append(key, x)
                            });
                        }
                        else {
                            form.append(key, self.productFields[key]);
                        }
                    });

                    form.append("deletePictures", this.deletePics)

                    fetch(qureyEditBaseUrl, {
                        method: "POST",
                        body: form
                        //headers: {'content-type': 'multipart/form-data'}
                    })
                        .then(function (response) { return response.json() })
                        .then(function (result) {
                            console.log(result);
                            var al = {
                                icon: 'success',
                                title: 'Edit Save Success!!!',
                                text: result.message,
                                timer: 3000
                            };
                            if (result.status!=true) {
                                al.icon = "error";
                                al.title = "Edit Save Failed!!!";
                                al.timer = 5000;
                                Swal.fire(al);
                                return window.location.reload();
                            }
                            else{
                                Swal.fire(al).then(() => { window.location = '/products/index/' })
                            }
                            
                            self.getData();
                        })
                }
            }

        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
